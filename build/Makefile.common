# Copyright (c) 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
#
#

#------------------------------------------------------------------------------
# Define common parts for Parallel STL
#------------------------------------------------------------------------------

.SUFFIXES:

ifeq (, $(filter $(MAKECMDGOALS), clean clean_all))
    ifeq (omp,$(filter omp,$(backend)))
        $(info Using OpenMP backend)
    else
        ifeq (tbb,$(filter tbb,$(backend)))
            $(info Using TBB backend)
        else
            $(info Threading backend was not specified; using TBB)
            backend=tbb
        endif
    endif
    ifeq (, $(filter $(linkage), shared static none))
        $(warning using linkage=none (header-only implementation))
        linkage=none
    endif
endif

ifndef os_name
  # Windows sets environment variable OS; for other systems, ask uname
  ifeq ($(OS),)
    OS:=$(shell uname)
    ifeq ($(OS),)
      $(error "Cannot detect operating system")
    endif
    os_name=$(OS)
  endif

  ifeq ($(OS), Windows_NT)
    os_name=windows
  endif
  ifeq ($(OS), Linux)
    os_name=linux
  endif
  ifeq ($(OS), Darwin)
    os_name=macos
  endif
endif # !os_name

cfg ?= release
stdver ?= c++11

override INCLUDES += -I$(proj_root)/include -I$(proj_root)/test 

TEST_MACRO += -D__PSTL_TEST_SUCCESSFUL_KEYWORD=1

ifeq ($(backend), omp)
    BACKEND_MACRO += -D__PSTL_USE_OPENMP
endif

ifeq ($(backend), tbb)
    BACKEND_MACRO += -D__PSTL_USE_TBB
endif

ifneq (, $(filter $(linkage), shared))
    LINKAGE_MACRO += -D__PSTL_SHARED_LINKAGE
endif

ifeq (, $(filter $(linkage), none))
    LINKAGE_MACRO += -D__PSTL_HEADER_ONLY=0
endif

target ?= $(os_name)
#OS specific keys
ifeq ($(target),windows)
    include $(proj_root)/build/windows.inc
else
    include $(proj_root)/build/unix.inc
    ifneq (,$(wildcard $(proj_root)/build/$(target).inc))
        include $(proj_root)/build/$(target).inc
        $(info included additional file $(proj_root)/build/$(target).inc)
    endif
endif

# compiler specific keys
ifneq (, $(filter $(compiler), gcc g++))
    include $(proj_root)/build/gcc.inc
endif

ifneq (, $(filter $(compiler), clang clang++))
    include $(proj_root)/build/clang.inc
endif

ifneq (, $(filter $(compiler), icc icpc icx))
    include $(proj_root)/build/icc.inc
endif

ifneq (, $(filter $(compiler), icl))
    include $(proj_root)/build/icl.inc
endif


OPTIMIZATION_ENABLED_FLAGS += $(XHOST_FLAG)
OPTIMIZATION_DISABLED_FLAGS += $(XHOST_FLAG) 


ifeq ($(cfg), debug)
    TBB_LIB_NAME = tbb_debug
    BACKEND_MACRO += -DTBB_USE_DEBUG=1
    OPTIMIZATION_KEYS = $(OPTIMIZATION_DISABLED_FLAGS)
else
    OPTIMIZATION_KEYS = $(OPTIMIZATION_ENABLED_FLAGS)
endif

DYN_LDFLAGS += $(PSTL_ARCH)

CPLUS_FLAGS += $(TEST_MACRO)
CPLUS_FLAGS += $(INCLUDES)
CPLUS_FLAGS += $(BACKEND_MACRO)
CPLUS_FLAGS += $(LINKAGE_MACRO)
CPLUS_FLAGS += $(CXXFLAGS)
CPLUS_FLAGS += $(OPTIMIZATION_KEYS)

CPLUS_FLAGS += $(DISABLED_WARNINGS)
CPLUS_FLAGS += $(PSTL_ARCH)
